file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run", "Sample.ID","Chamber.ID","Intercept", "umol.L.min")
Sample.Info<-read.csv("/Users/talimass/Documents/Documents - MacBook Pro/GitHub/BSF_Climate_Solutions/Ranalysis/data/Liel_fluoro/Respiration/Spat_Info.csv") #information on life stage, number of individuals, runs, etc.
rename <- Sample.Info$Chamber.ID
samp <- Sample.Info$Sample.ID
run <- str_sub(file.names, 10, 15) #grab run from file name
date <- str_sub(file.names, 1, str_length(file.names)-16) #grab date from file name
#load in respiration start times as a list the same length as the number of files
starttimes<-read.csv("/Users/talimass/Documents/Documents - MacBook Pro/GitHub/BSF_Climate_Solutions/Ranalysis/data/Liel_fluoro/Respiration/starttimes.csv") #read in file of starting R and P phase times
rtime<-starttimes$Rtime #list respiration start times. For respiration measurements, filter as > than this time
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
Resp.Data$Temp <- Resp.Data[,31] #assigns temp column
Resp.Data$Time.Min <- seq.int(from=0, to=((nrow(Resp.Data)*0.25)-0.25), by = 0.25) #set time in min
Resp.Data <- Resp.Data %>% #filters data by phase (respiration only)
filter(Time.Min > rtime[i])
Resp.Data.N <- Resp.Data[,3:26] #subset desired columns
for(j in 1:(ncol(Resp.Data.N))){
model <- rankLocReg(
xall=Resp.Data$Time.Min, yall=as.numeric(Resp.Data.N[, j]),
alpha=0.4, method="pc", verbose=TRUE) #extract slopes, percentile rank method with minimum window size of 0.4. This means that in order to fit a slope, it has to encompass at least 40% of available datapoints.
pdf(paste0("/Users/talimass/Documents/Documents - MacBook Pro/GitHub/BSF_Climate_Solutions/Ranalysis/data/Liel_fluoro/Respiration/RespirationPlots /",date[i], "_",run[i],"_",rename[j],"_regression_trunc.pdf")) #generate output file names
plot(model)
dev.off()
Resp.Rb[j,1] <- as.character(date[i]) #stores the date
Resp.Rb[j,2] <- as.character(run[i]) #stores the run number
Resp.Rb[j,3] <- as.character(samp[j+(i-1)*ncol(Resp.Data.N)]) #stores the sample ID
Resp.Rb[j,4] <- as.character(rename[j]) #stores the chamber ID
Resp.Rb[j,5:6] <- model$allRegs[i,c(4,5)] #inserts slope and intercept in the dataframe
}
Resp.R <- rbind(Resp.R, Resp.Rb) #bind final data frame
}
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
Resp.Data$Temp <- Resp.Data[,31] #assigns temp column
Resp.Data$Time.Min <- seq.int(from=0, to=((nrow(Resp.Data)*0.25)-0.25), by = 0.25) #set time in min
Resp.Data <- Resp.Data %>% #filters data by phase (respiration only)
filter(Time.Min > rtime[i])
Resp.Data.N <- Resp.Data[,3:26] #subset desired columns
for(j in 1:(ncol(Resp.Data.N))){
model <- rankLocReg(
xall=Resp.Data$Time.Min, yall=as.numeric(Resp.Data.N[, j]),
alpha=0.4, method="pc", verbose=TRUE) #extract slopes, percentile rank method with minimum window size of 0.4. This means that in order to fit a slope, it has to encompass at least 40% of available datapoints.
pdf(paste0("/Users/talimass/Documents/Documents - MacBook Pro/GitHub/BSF_Climate_Solutions/Ranalysis/data/Liel_fluoro/Respiration/RespirationPlots /",date[i], "_",run[i],"_",rename[j],"_regression_trunc.pdf")) #generate output file names
plot(model)
dev.off()
Resp.Rb[j,1] <- as.character(date[i]) #stores the date
Resp.Rb[j,2] <- as.character(run[i]) #stores the run number
Resp.Rb[j,3] <- as.character(samp[j+(i-1)*ncol(Resp.Data.N)]) #stores the sample ID
Resp.Rb[j,4] <- as.character(rename[j]) #stores the chamber ID
Resp.Rb[j,5:6] <- model$allRegs[i,c(4,5)] #inserts slope and intercept in the dataframe
}
Resp.R <- rbind(Resp.R, Resp.Rb) #bind final data frame
}
Resp.R <- Resp.R[-1,] #remove empty column
write.csv(Resp.R, paste0("/Users/talimass/Documents/Documents - MacBook Pro/GitHub/BSF_Climate_Solutions/Ranalysis/data/Liel_fluoro/Respiration/Respiration_rates_Spis_2024.csv", sep="")) #save respiration rate data
Resp.Rates <- read.csv(file = "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/BSF_Climate_Solutions/Ranalysis/data/Liel_fluoro/Respiration/Respiration_rates_Spis_2024.csv") #read file back in so slopes don't have to be generated every time
Resp.Rates <- subset(Resp.Rates, select = -c(X) ) #remove empty column
#format "Date" column
Resp.Rates$Date <- gsub("_.*", "", Resp.Rates$Date)
Resp.Rates$Date <- as.numeric(as.character(Resp.Rates$Date))
#format "run" column
#Resp.Rates<-Resp.Rates %>%
#  mutate(Run = str_sub(Run, 4, -1))
#Resp.Rates$Run<-as.integer(Resp.Rates$Run) #format as # rather than run #, set as integer
oxygen<-left_join(Sample.Info, Resp.Rates, by="Sample.ID") #add respiration data
colnames(oxygen)[colnames(oxygen) == 'Intercept'] <- 'Resp.Intercept' #rename to specify R
colnames(oxygen)[colnames(oxygen) == 'umol.L.min'] <- 'R.umol.L.min' #rename to specify R
ggplot(oxygen, aes(R.umol.L.min, Plate.ID,)) +
geom_point()
#Account for chamber volume to convert from umol L-1 m-1 to umol m-1. This standardizes across water volumes (different because of coral size) and removes per Liter
oxygen$R.umol.min <- oxygen$R.umol.L.min * oxygen$Volume #calculate
ggplot(oxygen, aes(R.umol.min, Plate.ID,)) +
geom_point()
blank_data <- subset(oxygen, Type == "Blank") #subset to blank data only
plot(blank_data$R.umol.min,  ylab="umol O2 min-1") #blanks during dark phase
ggplot(blank_data, aes(R.umol.min, Plate.ID)) +
geom_point()
#display mean blankvalues
meanRblank<-mean(blank_data$R.umol.min) #mean R phase blanks
#filter dark phase blank values
blank_data<-blank_data%>%
filter(R.umol.min > -0.0002)
ggplot(blank_data, aes(R.umol.min, Plate.ID,)) +
geom_point()
oxygen$code<-paste(oxygen$Date, oxygen$Plate.ID)
plot(oxygen$R.umol.min~as.factor(oxygen$code), ylab="umol O2 min-1")
#blank per plate
resp.blnk <- aggregate(R.umol.min ~ Plate.ID, data=blank_data, mean) #calculate average blank per plate
colnames(resp.blnk)[colnames(resp.blnk) == 'R.umol.min'] <- 'R.Blank.umol.min' #rename to specify blank for R
oxygen <- full_join(oxygen, resp.blnk) #add R blanks to master
oxygen<-oxygen%>%
mutate(R.Blank.umol.min = ifelse(is.na(R.Blank.umol.min), meanRblank, R.Blank.umol.min))
oxygen$R.Blank.umol.min <- meanRblank
range(oxygen$R.umol.min*10000)
range(oxygen$R.Blank.umol.min*10000)
oxygen$R.umol.min.corr<-oxygen$R.umol.min-oxygen$R.Blank.umol.min #subtract R blanks
range(oxygen$R.umol.min.corr*10000)
ggplot(oxygen, aes(R.umol.min.corr, Plate.ID)) +
geom_point()
oxygen.bio <- oxygen %>% filter(Type == "Coral") #isolate only biological samples and drop unused factor levels
oxygen.bio <- droplevels(oxygen.bio) #drop unused factor levels
oxygen.bio$Size.mm2 <- as.numeric(as.character(oxygen.bio$Size.mm2))
#respiration
oxygen.bio$R.umol.mm2.min <- oxygen.bio$R.umol.min.corr/oxygen.bio$Size.mm2 #calculate oxygen per organism (larvae or recruit)
oxygen.bio$R.nmol.mm2.min <- oxygen.bio$R.umol.mm2.min*1000 #calculate nanmoles
ggplot(oxygen.bio, aes(R.nmol.mm2.min, Plate.ID)) +
geom_point()
#filter outliers
oxygen.bio <- oxygen.bio %>%
filter(R.nmol.mm2.min > -0.15) %>%
filter(R.nmol.mm2.min < 0)
ggplot(oxygen.bio, aes(R.nmol.mm2.min, Plate.ID)) +
geom_point()
ggplot(oxygen.bio, aes(R.nmol.mm2.min, Plate.ID,)) +
geom_point()
#Plot Resp as a function of Fluorescent
ggplot(data = oxygen.bio, aes(x = Fluorescent, y = R.nmol.mm2.min)) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2","P")), size = 4) +
geom_point() +
theme_classic()
#Plot Resp as a function of Size
ggplot(data = oxygen.bio, aes(x = Size.mm2, y = R.nmol.mm2.min)) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2","P")), size = 4) +
geom_point() +
theme_classic()
#Plot Resp as a function of Size
ggplot(data = oxygen.bio, aes(x = log10(Size.mm2+1), y = log10(R.nmol.mm2.min+1))) +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2","P")), size = 4) +
geom_point() +
theme_classic()
write.csv(oxygen.bio, paste0("/Users/talimass/Documents/Documents - MacBook Pro/GitHub/BSF_Climate_Solutions/Ranalysis/output/Liel_spat_RespRates.csv", sep="")) #save final file
# Load necessary libraries
library(tidyverse)
# Read the CSV file
df <- read.csv("/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/microCT/Skeletal thickness 3Dum.csv")
# Reshape and process
data_long <- df %>%
pivot_longer(-slice, names_to = "Sample", values_to = "Thickness") %>%
mutate(
Treatment = sapply(strsplit(Sample, "_"), function(x) x[2]),
um = slice * 15  # Convert slice to microns
)
# Filter for first 100 slices only
data_100 <- data_long %>% filter(slice <= 100)
# Compute mean and SEM per slice per treatment
summary_100 <- data_100 %>%
group_by(slice, um, Treatment) %>%
summarise(
Mean_Thickness = mean(Thickness, na.rm = TRUE),
SD = sd(Thickness, na.rm = TRUE),
n = n(),
SEM = SD / sqrt(n),
.groups = "drop"
)
# Plot WITHOUT error bars
plot_no_error_100 <- ggplot(summary_100, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Skeletal Thickness (First 100 Slices)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set2") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_100 <- ggplot(summary_100, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.6) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness with SEM (First 100 Slices)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set2") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "skeletal_thickness_100slices_no_errorbars.png"),
plot = plot_no_error_100, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "skeletal_thickness_100slices_no_errorbars.pdf"),
plot = plot_no_error_100, width = 8, height = 5)
ggsave(file.path(output_path, "skeletal_thickness_100slices_with_sem.png"),
plot = plot_with_sem_100, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "skeletal_thickness_100slices_with_sem.pdf"),
plot = plot_with_sem_100, width = 8, height = 5)
# Filter for DD and SS treatments and first 100 slices
data_dd_ss <- data_long %>%
filter(Treatment %in% c("DD", "SS"), slice <= 100)
# Compute mean and SEM per slice per treatment
summary_dd_ss <- data_dd_ss %>%
group_by(slice, um, Treatment) %>%
summarise(
Mean_Thickness = mean(Thickness, na.rm = TRUE),
SD = sd(Thickness, na.rm = TRUE),
n = n(),
SEM = SD / sqrt(n),
.groups = "drop"
)
# Plot WITHOUT error bars
plot_no_error_dd_ss <- ggplot(summary_dd_ss, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs SS (No Error Bars)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_dd_ss <- ggplot(summary_dd_ss, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs SS (With SEM)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "DD_SS_100slices_no_errorbars.png"),
plot = plot_no_error_dd_ss, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_SS_100slices_no_errorbars.pdf"),
plot = plot_no_error_dd_ss, width = 8, height = 5)
ggsave(file.path(output_path, "DD_SS_100slices_with_sem.png"),
plot = plot_with_sem_dd_ss, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_SS_100slices_with_sem.pdf"),
plot = plot_with_sem_dd_ss, width = 8, height = 5)
# Filter for DD and DS treatments and first 100 slices
data_dd_ds <- data_long %>%
filter(Treatment %in% c("DD", "DS"), slice <= 100)
# Compute mean and SEM per slice per treatment
summary_dd_ds <- data_dd_ds %>%
group_by(slice, um, Treatment) %>%
summarise(
Mean_Thickness = mean(Thickness, na.rm = TRUE),
SD = sd(Thickness, na.rm = TRUE),
n = n(),
SEM = SD / sqrt(n),
.groups = "drop"
)
# Plot WITHOUT error bars
plot_no_error_dd_ds <- ggplot(summary_dd_ds, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs DS (No Error Bars)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_dd_ds <- ggplot(summary_dd_ds, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs DS (With SEM)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "DD_DS_100slices_no_errorbars.png"),
plot = plot_no_error_dd_ds, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_DS_100slices_no_errorbars.pdf"),
plot = plot_no_error_dd_ds, width = 8, height = 5)
ggsave(file.path(output_path, "DD_DS_100slices_with_sem.png"),
plot = plot_with_sem_dd_ds, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_DS_100slices_with_sem.pdf"),
plot = plot_with_sem_dd_ds, width = 8, height = 5)
# Filter for SS and SD treatments and first 100 slices
data_ss_sd <- data_long %>%
filter(Treatment %in% c("SS", "SD"), slice <= 100)
# Compute mean and SEM per slice per treatment
summary_ss_sd <- data_ss_sd %>%
group_by(slice, um, Treatment) %>%
summarise(
Mean_Thickness = mean(Thickness, na.rm = TRUE),
SD = sd(Thickness, na.rm = TRUE),
n = n(),
SEM = SD / sqrt(n),
.groups = "drop"
)
# Plot WITHOUT error bars
plot_no_error_ss_sd <- ggplot(summary_ss_sd, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Skeletal Thickness: SS vs SD (No Error Bars)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_ss_sd <- ggplot(summary_ss_sd, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness: SS vs SD (With SEM)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "SS_SD_100slices_no_errorbars.png"),
plot = plot_no_error_ss_sd, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "SS_SD_100slices_no_errorbars.pdf"),
plot = plot_no_error_ss_sd, width = 8, height = 5)
ggsave(file.path(output_path, "SS_SD_100slices_with_sem.png"),
plot = plot_with_sem_ss_sd, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "SS_SD_100slices_with_sem.pdf"),
plot = plot_with_sem_ss_sd, width = 8, height = 5)
# Filter for SS and SD treatments and first 100 slices
data_ss_sd <- data_long %>%
filter(Treatment %in% c("SS", "SD"), slice <= 100)
# Compute mean and SEM per slice per treatment
summary_ss_sd <- data_ss_sd %>%
group_by(slice, um, Treatment) %>%
summarise(
Mean_Thickness = mean(Thickness, na.rm = TRUE),
SD = sd(Thickness, na.rm = TRUE),
n = n(),
SEM = SD / sqrt(n),
.groups = "drop"
)
# Plot WITHOUT error bars
plot_no_error_ss_sd <- ggplot(summary_ss_sd, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Skeletal Thickness: SS vs SD (No Error Bars)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_ss_sd <- ggplot(summary_ss_sd, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness: SS vs SD (With SEM)",
x = "Depth (µm)",
y = "Skeletal Thickness (3 µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "SS_SD_100slices_no_errorbars.png"),
plot = plot_no_error_ss_sd, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "SS_SD_100slices_no_errorbars.pdf"),
plot = plot_no_error_ss_sd, width = 8, height = 5)
ggsave(file.path(output_path, "SS_SD_100slices_with_sem.png"),
plot = plot_with_sem_ss_sd, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "SS_SD_100slices_with_sem.pdf"),
plot = plot_with_sem_ss_sd, width = 8, height = 5)
# Plot WITHOUT error bars
plot_no_error_100 <- ggplot(summary_100, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Skeletal Thickness (First 100 Slices)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set2") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_100 <- ggplot(summary_100, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.6) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness with SEM (First 100 Slices)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set2") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "skeletal_thickness_100slices_no_errorbars.png"),
plot = plot_no_error_100, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "skeletal_thickness_100slices_no_errorbars.pdf"),
plot = plot_no_error_100, width = 8, height = 5)
ggsave(file.path(output_path, "skeletal_thickness_100slices_with_sem.png"),
plot = plot_with_sem_100, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "skeletal_thickness_100slices_with_sem.pdf"),
plot = plot_with_sem_100, width = 8, height = 5)
# Plot WITHOUT error bars
plot_no_error_dd_ss <- ggplot(summary_dd_ss, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs SS (No Error Bars)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_dd_ss <- ggplot(summary_dd_ss, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs SS (With SEM)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "DD_SS_100slices_no_errorbars.png"),
plot = plot_no_error_dd_ss, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_SS_100slices_no_errorbars.pdf"),
plot = plot_no_error_dd_ss, width = 8, height = 5)
ggsave(file.path(output_path, "DD_SS_100slices_with_sem.png"),
plot = plot_with_sem_dd_ss, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_SS_100slices_with_sem.pdf"),
plot = plot_with_sem_dd_ss, width = 8, height = 5)
# Plot WITHOUT error bars
plot_no_error_dd_ds <- ggplot(summary_dd_ds, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs DS (No Error Bars)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_dd_ds <- ggplot(summary_dd_ds, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness: DD vs DS (With SEM)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "DD_DS_100slices_no_errorbars.png"),
plot = plot_no_error_dd_ds, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_DS_100slices_no_errorbars.pdf"),
plot = plot_no_error_dd_ds, width = 8, height = 5)
ggsave(file.path(output_path, "DD_DS_100slices_with_sem.png"),
plot = plot_with_sem_dd_ds, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "DD_DS_100slices_with_sem.pdf"),
plot = plot_with_sem_dd_ds, width = 8, height = 5)
# Plot WITHOUT error bars
plot_no_error_ss_sd <- ggplot(summary_ss_sd, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
theme_minimal() +
labs(title = "Skeletal Thickness: SS vs SD (No Error Bars)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Plot WITH SEM error bars
plot_with_sem_ss_sd <- ggplot(summary_ss_sd, aes(x = um, y = Mean_Thickness, color = Treatment)) +
geom_point(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Thickness - SEM, ymax = Mean_Thickness + SEM),
width = 10, alpha = 0.5) +
theme_minimal() +
labs(title = "Skeletal Thickness: SS vs SD (With SEM)",
x = "Depth (µm)",
y = "Skeletal Thickness ( µm)") +
scale_color_brewer(palette = "Set1") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 9))
# Define output path
output_path <- "/Users/talimass/Documents/Documents - MacBook Pro/GitHub/Cayman-translocation/Ranalysis/output"
# Save plots
ggsave(file.path(output_path, "SS_SD_100slices_no_errorbars.png"),
plot = plot_no_error_ss_sd, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "SS_SD_100slices_no_errorbars.pdf"),
plot = plot_no_error_ss_sd, width = 8, height = 5)
ggsave(file.path(output_path, "SS_SD_100slices_with_sem.png"),
plot = plot_with_sem_ss_sd, width = 8, height = 5, dpi = 300)
ggsave(file.path(output_path, "SS_SD_100slices_with_sem.pdf"),
plot = plot_with_sem_ss_sd, width = 8, height = 5)
